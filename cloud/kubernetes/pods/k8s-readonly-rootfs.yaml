id: k8s-readonly-rootfs

info:
  name: Pods with read-only root filesystem
  author: princechaddha
  severity: medium
  description: Checks for pods and containers running with a read-only root filesystem to prevent modifications to the filesystem, enhancing security.
  impact: |
    Running containers with a read-only root filesystem ensures that applications are not able to write to the filesystem or modify existing content. This is a common security practice to prevent malicious changes.
  remediation: |
    Configure all pods and containers to have their root filesystem set to read-only mode. This can be achieved by setting the securityContext.readOnlyRootFilesystem parameter to true in the pod or container configuration.
  reference:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
  tags: cloud,devops,kubernetes,security,devsecops,pods,k8s

flow: |
  code(1);
  for (let pod of template.items) {
    set("pod", pod)
    javascript(1);
  }

self-contained: true
code:
  - engine:
      - sh
      - bash
    source: kubectl get pods --all-namespaces --output=json
    extractors:
      - type: json
        name: items
        internal: true
        json:
          - '.items[] | {pod: .metadata.name, containers: .spec.containers}'

javascript:
  - code: |
        let podData = JSON.parse(template.pod); 
        podData.containers.forEach(container => {
          if (container.securityContext && container.securityContext.readOnlyRootFilesystem !== true) {
            let result = (`Container '${container.name}' in pod '${podData.pod}' is not running with a read-only root filesystem.`);
            Export(result);
          }
        });

    extractors:
      - type: dsl
        dsl:
          - response
# digest: 490a0046304402205ca1449c5ae245df848df2d8b4117966ed8fc276841e0132e2844c643179f4c9022056438a03c5cb5402b1d07b3d1d88f123559df889348d5605c01ce0aedbedaf47:366f2a24c8eb519f6968bd8801c08ebe