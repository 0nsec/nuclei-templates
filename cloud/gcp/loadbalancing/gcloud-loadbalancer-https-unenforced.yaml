id: gcloud-loadbalancer-https-unenforced

info:
  name: Enable HTTPS for Google Cloud Load Balancers
  author: princechaddha
  severity: high
  description: |
    Ensure that your Google Cloud Platform (GCP) load balancers are configured to use valid SSL/TLS certificates to handle encrypted web traffic. SSL certificate resources contain SSL certificate information that the load balancer uses to terminate SSL/TLS when HTTPS clients connect to it.
  impact: |
    Load balancers without SSL/TLS certification are vulnerable to data breaches as unencrypted data can be easily intercepted and manipulated.
  remediation: |
    Configure your load balancers to use valid SSL/TLS certificates and enable HTTPS to ensure encrypted communications between clients and the load balancer.
  reference:
    - https://cloud.google.com/load-balancing/docs/ssl-certificates
  tags: cloud,devops,gcp,gcloud,google-cloud-load-balancer,gcp-cloud-config

flow: |
  code(1)
  for(let projectId of iterate(template.projectIds)){
    set("projectId", projectId)
    code(2)
    for(let urlMap of iterate(template.urlMaps)){
      set("urlMap", urlMap)
      code(3)
      let httpsUnenforced = true;
      for(let targetProxy of iterate(template.targetProxies)){
        if(urlMap === targetProxy.urlMap){
          httpsUnenforced = false;
          break;
        }
      }
      if(httpsUnenforced){
        javascript(1);
      }
    }
  }

self-contained: true

code:
  - engine:
      - sh
      - bash
    source: |
      gcloud projects list --format="json(projectId)"

    extractors:
      - type: json
        name: projectIds
        internal: true
        json:
          - '.[].projectId'

  - engine:
      - sh
      - bash
    source: |
      gcloud compute url-maps list --project $projectId --format="json(name)"

    extractors:
      - type: json
        name: urlMaps
        internal: true
        json:
          - '.[].name'

  - engine:
      - sh
      - bash
    source: |
      gcloud compute target-https-proxies list --project $projectId --format="json(name, urlMap)"

    extractors:
      - type: json
        name: targetProxies
        internal: true
        json:
          - '.[] | {name: .name, urlMap: .urlMap}'

javascript:
  - code: |
        let urlMap = template.urlMap;
        let projectId = template.projectId;
        Export("HTTPS Not Enforced: URL Map " + urlMap + " in Project " + projectId);

    extractors:
      - type: dsl
        dsl:
          - response
