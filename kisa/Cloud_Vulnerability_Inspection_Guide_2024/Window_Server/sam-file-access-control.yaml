id: sam-file-access-control

info:
  name: SAM File Access Control Check
  author: nukunga[SungHyunJeon]
  severity: medium
  description: |
    Verify that the SAM file (%SystemRoot%\system32\config\SAM) is secured such that only the Administrators and SYSTEM groups have full access.
    If permissions for any other users or groups are found, it indicates a potential security risk.
  impact: |
    If accounts or groups other than Administrators and SYSTEM have access to the SAM file, attackers may exploit this to access sensitive password data,
    increasing the risk of password attacks.
  remediation: |
    Remove any permissions granted to accounts or groups other than the Administrators and SYSTEM groups. This can be done by running:
    > cacls %systemroot%\system32\config\SAM /remove:g [UserOrGroup]
    or by modifying the permissions via File Explorer.
  tags: sam,account-management,windows,windows,code,windows-audit,kisa

self-contained: true

code:
  - pre-condition: |
      IsWindows();
    engine:
      - powershell
      - powershell.exe
    args:
      - -ExecutionPolicy
      - Bypass
    pattern: "*.ps1"
    source: |
      $samPath = "$env:SystemRoot\system32\config\SAM"
      if (-Not (Test-Path $samPath)) {
          "SAM_FILE_NOT_FOUND"
          exit
      }
      # Retrieve the ACL for the SAM file
      $acl = Get-Acl $samPath
      # Define allowed identities (variations may exist)
      $allowed = @("BUILTIN\Administrators", "Administrators", "NT AUTHORITY\SYSTEM", "SYSTEM")
      $vulnerable = $false
      foreach ($ace in $acl.Access) {
          $account = $ace.IdentityReference.ToString()
          if ($allowed -notcontains $account) {
              $vulnerable = $true
              break
          }
      }
      if ($vulnerable) {
          "SAM_ACCESS_VULNERABLE"
      } else {
          "SAM_ACCESS_COMPLIANT"
      }

    matchers:
      - type: word
        words:
          - "SAM_ACCESS_VULNERABLE"